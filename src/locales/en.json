{
  "app": {
    "title": "ClaudeCode Reset Schedule",
    "subtitle": "Usage Analysis",
    "description": "Dynamic 5-hour reset cycle + Detailed usage analysis + Real-time cost simulation",
    "currentTime": "Current Time (Local)",
    "nextReset": "Time Until Next Reset",
    "tomorrow": "(Tomorrow)",
    "currentPeriodUsage": "Current Period Usage",
    "current": "Current",
    "noData": "No data",
    "dynamicResetRule": "Dynamic Reset Rule: Resets every 5 hours from first usage. When a reset time is passed, a new cycle starts from the first usage time (snapped to 00 minutes) after the reset.",
    "notice": "Notice: Using default reference time (January 1, 2025 00:00) due to no usage data. Actual reset time may differ.",
    "currentResetCycleBase": "Current Reset Cycle Base Time:",
    "weekdays": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    "privacy": "ðŸ”’ No external data transmission",
    "browserProcessing": "âš¡ Complete browser processing",
    "realtimeAnalysis": "ðŸŽ¯ Real-time analysis"
  },
  "tabs": {
    "stats": "Usage Stats",
    "history": "Period History",
    "files": "File Management",
    "info": "Information",
    "noData": "(No data)"
  },
  "usage": {
    "totalRequests": "Total Requests",
    "totalTokens": "Total Tokens",
    "payAsYouGoCost": "Pay-as-you-go Cost",
    "times": "times",
    "requests": "requests",
    "tokens": "tokens",
    "input": "Input",
    "output": "Output",
    "total": "Total",
    "cacheWrite": "Cache Write",
    "cacheRead": "Cache Read",
    "inputCost": "Input Cost",
    "outputCost": "Output Cost",
    "cacheWriteCost": "Cache Write Cost",
    "cacheReadCost": "Cache Read Cost",
    "totalCost": "Total Cost",
    "usageStats": "Usage Statistics & Estimates",
    "detailedCostBreakdown": "Detailed Cost Breakdown (Pay-as-you-go)",
    "calculationFormula": "Calculation Formula: Input tokens Ã· 1,000,000 Ã— Input rate + Output tokens Ã· 1,000,000 Ã— Output rate + Cache creation tokens Ã· 1,000,000 Ã— Cache write rate + Cache read tokens Ã· 1,000,000 Ã— Cache read rate",
    "cacheFeature": "Cache Feature: A mechanism for efficiently reusing long conversation histories and contexts. Write operations cost 1.25x normal rate, read operations cost 0.1x normal rate.",
    "modelUsageStats": "Model Usage Statistics & Cost Breakdown",
    "planCostSimulation": "Plan Cost Simulation",
    "usageRate": "Usage rate",
    "remaining": "Remaining",
    "currentUsagePayAsYouGo": "Current Usage Pay-as-you-go Cost",
    "currentCumulativeCost": "Current cumulative cost",
    "estimatedMonthlyUsage": "Estimated monthly usage",
    "dailyAverageCost": "Daily average cost",
    "currentPlanNote": "The current $100 plan applies substantial discounts to this pay-as-you-go cost.",
    "200DollarPlan4xTokens": "$200 Plan (4x Token Usage)",
    "4xTokensPayAsYouGoCost": "4x tokens pay-as-you-go cost",
    "200DollarPlanFixedFee": "$200 plan fixed fee",
    "estimatedMonthly4x": "Estimated monthly (4x)",
    "potentialSavings": "Potential savings",
    "200DollarPlanNote": "The $200 plan allows 4x token usage. The difference between pay-as-you-go cost at 4x usage and the $200 fixed fee becomes savings.",
    "daysUntil200Limit": "Days until $200 limit",
    "days": "days",
    "200DollarPlanBasis": "($200 plan basis)",
    "4xUsageSavings": "4x usage savings",
    "vs": "vs",
    "payAsYouGoCost2": "Pay-as-you-go cost",
    "noSavings": "No savings",
    "pricingNote": "Pricing (per 1M tokens): â€¢ Claude 4 Opus: Input $15ãƒ»Output $75ãƒ»Cache write $18.75ãƒ»Cache read $1.5 â€¢ Claude 4 Sonnet: Input $3ãƒ»Output $15ãƒ»Cache write $3.75ãƒ»Cache read $0.3. Actual pricing may vary by model and time period. Exchange rate: USD/JPY = 150 (2025 basis)",
    "hourlyDistribution": "Hourly Cost Distribution (24-hour weighted display)",
    "peakHour": "Peak hour (cost basis)",
    "tokenDetails": "Token Details",
    "cacheCreation": "Cache Creation",
    "cacheRead": "Cache Read",
    "lastUsage": "Last usage"
  },
  "periodHistory": {
    "title": "5-Hour Period Usage History",
    "periods": "periods",
    "noHistory": "No usage history data",
    "tokenUsage": "Token Usage",
    "costBreakdown": "Cost Breakdown",
    "modelDetails": "Model Details",
    "noPeriodUsage": "No usage in this period",
    "barDisplay": "Bar display: Cost-weighted (Claude 4 Opus â‰ˆ Claude 4 Sonnet Ã— 5x cost consumption) | Cache: Write 1.25xãƒ»Read 0.1x cost | Exchange rate: USD/JPY = 150 (2025 basis)",
    "modelConsumptionSpeed": "Model Resource Consumption Speed: Opus models consume resources at approximately 5x the cost of Sonnet models. Output tokens are more expensive than input tokens, so longer responses increase consumption speed. Cache functionality significantly reduces costs when reusing long conversation histories.",
    "filters": "Filters",
    "sortBy": "Sort by",
    "date": "Date",
    "requests": "Requests",
    "cost": "Cost",
    "tokens": "Tokens",
    "startDate": "Start Date",
    "endDate": "End Date",
    "minRequests": "Min. Requests",
    "minCost": "Min. Cost",
    "clearFilters": "Clear Filters",
    "periodsShown": "periods shown",
    "noMatchingPeriods": "No periods match the current filters",
    "page": "Page",
    "previous": "Previous",
    "next": "Next",
    "first": "First",
    "last": "Last",
    "itemsPerPage": "Items per page",
    "showing": "Showing",
    "of": "of"
  },
  "fileManager": {
    "title": "Stored Files",
    "files": "files",
    "deleteAll": "Delete All",
    "selectAll": "Select All",
    "deselectAll": "Deselect All",
    "deleteSelected": "Delete Selected",
    "selected": "selected",
    "noFiles": "No stored files",
    "uploadPrompt": "Upload JSONL files from above",
    "delete": "Delete",
    "deleteConfirm": "Delete \"{filename}\"?",
    "deleteSelectedConfirm": "Delete {count} selected files? This action cannot be undone.",
    "deleteAllConfirm": "Delete all files? This action cannot be undone.",
    "loadingFiles": "Loading files...",
    "deleteError": "Failed to delete file",
    "loadError": "Failed to load files",
    "storageNote": {
      "title": "Local Storage & Privacy Protection",
      "description": "This application uses IndexedDB for secure local data storage on your device:",
      "feature1": "All data is stored locally in your browser and never transmitted externally",
      "feature2": "Files persist between browser sessions until manually deleted",
      "feature3": "Data is isolated per browser and cannot be accessed by other websites",
      "feature4": "You have full control over your data with manual deletion options"
    }
  },
  "fileUpload": {
    "title": "Usage Data Upload",
    "dragDrop": "Drag & drop JSONL/JSON files",
    "clickToSelect": "or click to select files",
    "processing": "Processing files...",
    "analyzing": "Analyzing data...",
    "filesUploaded": "files uploaded",
    "errorsOccurred": "files had errors",
    "supportedFormats": "Supported formats: ClaudeCode log format",
    "multipleFiles": "Multiple JSONL files can be uploaded simultaneously",
    "overwrite": "Files with the same name will be automatically overwritten",
    "persistent": "Files are permanently stored in the browser",
    "noExternal": "Data is not sent externally",
    "notJsonl": "Not a JSONL/JSON file",
    "noValidData": "No valid JSONL data found",
    "noUsageData": "No usage data (token information) found",
    "processingError": "Processing error",
    "readError": "File read error"
  },
  "sampleData": {
    "title": "Try Sample Data",
    "description": "Download sample JSONL files to test the application features without needing your own ClaudeCode log files.",
    "downloadButton": "Download Sample JSONL",
    "downloadButton2": "Download Sample JSONL #2",
    "downloadSuccess": "Sample file downloaded successfully!",
    "downloadError": "Failed to download sample file",
    "fileDescription1": "Sample #1: Todo List Development Session",
    "fileDescription2": "Sample #2: Data Analysis Project Session",
    "instructions": "After downloading, upload the JSONL file using the \"File Management\" tab to see usage statistics, cost analysis, and period history.",
    "features": "Sample data includes:",
    "feature1": "â€¢ Multiple Claude 4 Sonnet and Opus model usage",
    "feature2": "â€¢ Cache functionality demonstration (write/read operations)",
    "feature3": "â€¢ Different time periods for reset cycle testing",
    "feature4": "â€¢ Realistic token usage patterns",
    "feature5": "â€¢ Cost calculation examples across different models",
    "currentPeriod": {
      "title": "Current Period Sample",
      "downloadButton": "Download Current Period Sample",
      "downloadSuccess": "Current period sample downloaded successfully!",
      "downloadError": "Failed to download current period sample",
      "noData": "No current period data available",
      "noDataNote": "Upload data first",
      "dummyDataGenerated": "Dummy data generated and downloaded for current period demonstration!"
    }
  },
  "info": {
    "title": "Dynamic 5-Hour Cycle Mechanism & Usage Analysis",
    "dynamicReset": {
      "title": "Dynamic 5-Hour Reset Cycle (Real Data Basisãƒ»00-Minute Snap):",
      "description": "ClaudeCode usage limits reset every 5 hours from the \"hour\" of first usage time. When a reset time is passed, a new cycle starts from the first usage time (snapped to 00 minutes) after the reset.",
      "example": "Example: First use at 9:30 â†’ 9:00 basis, resets at 14:00 â†’ Re-use at 15:20 â†’ New cycle starts from 15:00 basis",
      "important": "Important: Reset times are always at \"00 minutes\". This accurately reflects ClaudeCode's actual behavior."
    },
    "usageAnalysis": {
      "title": "Usage Data Analysis:",
      "supportedFormat": "â€¢ Supported format: ClaudeCode log format (JSONL files under .claude/projects/)",
      "fileLocation": "â€¢ File location: Usually in ~/.claude/projects/[project-name]/ directory",
      "autoAnalysis": "â€¢ Auto analysis: Automatically calculates token usage, estimated costs, hourly distribution",
      "dynamicCycle": "â€¢ Dynamic cycle: Dynamically calculates reset cycles based on actual usage patterns",
      "00MinSnap": "â€¢ 00-minute snap: Adjusts reset times to 00 minutes to match ClaudeCode's actual behavior",
      "detailedCost": "â€¢ Detailed cost analysis: Shows cost breakdown by inputãƒ»outputãƒ»cache tokens",
      "planComparison": "â€¢ Plan comparison: Cost comparison between pay-as-you-go and $200 plan",
      "persistent": "â€¢ Persistent storage: Safely stores data in browser, no external transmission"
    },
    "logFileLocation": {
      "title": "ClaudeCode Log File Location:",
      "description": "Log files for projects created with ClaudeCode are automatically saved in the following directories:",
      "macOS": "macOS: /Users/[username]/.claude/projects/[project-name]/",
      "linux": "Linux: /home/[username]/.claude/projects/[project-name]/",
      "note": "JSONL files containing usage data are stored in each project folder. By uploading these files, detailed usage analysis becomes possible. â€»ClaudeCode does not support Windows (as of June 2025)",
      "tip": "Tip: If you want to analyze data from multiple projects simultaneously, please upload JSONL files individually from each project folder."
    },
    "costCalculation": {
      "title": "Estimated Cost Calculation:",
      "opus": "Claude 4 Opus: Input $15/1M, Output $75/1M, Cache write $18.75/1M, Cache read $1.5/1M",
      "sonnet": "Claude 4 Sonnet: Input $3/1M, Output $15/1M, Cache write $3.75/1M, Cache read $0.3/1M",
      "note": "Actual pricing may vary by model and time period.",
      "formula": "Calculation formula: Input tokens Ã· 1,000,000 Ã— Input rate + Output tokens Ã· 1,000,000 Ã— Output rate + Cache creation tokens Ã· 1,000,000 Ã— Cache write rate + Cache read tokens Ã· 1,000,000 Ã— Cache read rate"
    },
    "planSimulation": {
      "title": "Plan Cost Simulation:",
      "payAsYouGo": "â€¢ Pay-as-you-go: Usage-based billing system",
      "200Plan": "â€¢ $200 plan: Fixed $200/month with 4x token usage available",
      "savings": "â€¢ Savings effect: Shows difference between pay-as-you-go cost at 4x usage and $200 fixed fee",
      "usageRate": "â€¢ Usage rate display: Visualizes current usage status on $200 plan",
      "costBreakdown": "â€¢ Cost breakdown: Shows inputãƒ»outputãƒ»cache token costs individually"
    },
    "cacheFeature": {
      "title": "Cache Feature:",
      "description": "A mechanism for efficiently reusing long conversation histories and contexts.",
      "cacheWrite": "â€¢ Cache write: Save conversation history to cache on first processing (1.25x normal cost)",
      "cacheRead": "â€¢ Cache read: Reuse saved history (0.1x normal cost)",
      "effect": "â€¢ Effect: Significant cost reduction possible when continuing long conversations",
      "note": "Note: Cache is automatically deleted after a certain time, so it's more effective for continuous conversations."
    },
    "examples": {
      "title": "Dynamic Reset Cycle Examples:",
      "normal": "Normal cycle: 9:30 first use â†’ 9:00 basis â†’ 14:00, 19:00, 00:00...",
      "restart": "Post-reset restart: 9:30 use â†’ 14:00 reset â†’ 15:20 re-use â†’ New cycle from 15:00 basis",
      "note": "When actual data is uploaded, cycles are dynamically calculated based on usage patterns. New cycles automatically start from the first usage time after reset times."
    },
    "notice": "Notice: All displayed times are in your local time zone. Exchange rate is calculated at USD/JPY = 150 (2025 basis)."
  },
  "common": {
    "loading": "Loading...",
    "error": "Error",
    "success": "Success",
    "cancel": "Cancel",
    "confirm": "Confirm",
    "close": "Close",
    "save": "Save",
    "delete": "Delete",
    "edit": "Edit",
    "add": "Add",
    "remove": "Remove",
    "select": "Select",
    "deselect": "Deselect",
    "all": "All",
    "none": "None",
    "yes": "Yes",
    "no": "No",
    "ok": "OK"
  }
}